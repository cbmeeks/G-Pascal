<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>file_menu</title>
  <style>
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <link rel="stylesheet" href="/G-Pascal/G-Pascal.css" />
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<header id="title-block-header">
<h1 class="title">G-Pascal File management</h1>
</header>
<p><strong>Author</strong>: Nick Gammon</p>
<p><strong>Date</strong>: February 2022</p>
<div class="quick_link">
<a href="index.htm">Back to main G-Pascal page</a>
</div>
<div class="quick_link">
<a href="editor.htm">Text editor</a>
</div>
<p>As described in the <a href="editor.htm">editor</a> section, simply entering Insert mode and dumping a whole lot of text into the Editor will not work, because the Editor tries to display line numbers for each line, and will fall behind the rate of the incoming source. Instead use Load as described below, and Save to get a copy of the current source without line numbers. There is also a Recover function, in case you press Reset and lose your source.</p>
<p>Available actions are:</p>
<pre><code>Available actions:

List/SAve   line_number_range
Delete      line_number_range
Insert/LOad after_line
Find        line_number_range /target/flags
Replace     line_number_range /target/replacement/flags

Help
INfo
Memory      first_address last_address
Compile/Syntax/Assemble
RUn/DEBug/Trace
RECover
(Actions may be abbreviated)
(Flags: &#39;I&#39;gnore case, &#39;G&#39;lobal, &#39;Q&#39;uiet)</code></pre>
<p>Press <strong>H</strong> to see the above.</p>
<hr />
<h2 id="load">Load</h2>
<p>This loads your source into memory basically copying it as quickly as possible into memory as it is received. You can specify a line number to load from (that is, to insert into an existing file). Without a line number the incoming source is inserted at the start, otherwise it is inserted after the nominated line.</p>
<p>You will see:</p>
<pre><code>Paste source, terminate with Esc</code></pre>
<p>Now is the time to copy the source from your Mac/PC, and then use the Paste function in your terminal program (or “send file” if there is such a function). Once the file has been sent press <strong>Esc</strong> to exit the loading mode.</p>
<p><em>Do not type anything while the file is loading! That will corrupt it. Just wait until it has finished.</em></p>
<p>Once you have finished loading you can type INFO to see something like this:</p>
<pre><code>Source starts at $0300
Source ends   at $3a63
Source lines:  645
Source length: 14178 bytes
Source CRC       $efdf</code></pre>
<p>You are then told the source length (14178 bytes) and Cyclic Redundancy Check (CRC) which is $efdf. This can be used to verify that the source loaded without errors. In this case I am using “Jacksum” to do the CRC on my PC.</p>
<pre><code>$ jacksum -a crc:16,1021,FFFF,false,false,0 -x adventure.pas

efdf    14178   adventure.pas</code></pre>
<p>You can see that both the file length (14178) and the checksum ($efdf) agree, therefore the file loaded reliably.</p>
<p>You can re-check the CRC lat any time by using the INFO action. Of course, the CRC will change as you change the source.</p>
<hr />
<h2 id="info">Info</h2>
<p>As described above under LOAD, typing INFO will tell you where the source starts and ends in memory, its length, and its CRC.</p>
<p>Note that the ending address of the source includes a trailing 0x00 byte, so even an empty file will occupy one byte of memory, however the “length” reported by INFO will not include that byte, to be consistent with the file size reported on your PC.</p>
<hr />
<h2 id="save">Save</h2>
<p>Save works similarly to List in the Editor, however line numbers are not shown at the start of each line. The intention here is to use Save to simply make a copy of your source, which you can then select in your terminal program, copy, and paste into a suitable file for saving on your PC/Mac.</p>
<p><em>Do not type anything while the file is saving! The interrupts that keyboard input generate will corrupt the saved text. Just wait until it has finished.</em></p>
<p><strong>WARNING</strong>: Do not replace existing good source with a source from your board until you have confirmed it is a good copy. I strongly suggest you save into a temporary file first, then check its file length and CRC before replacing a known-good file. To do this use the INFO action to find the file’s CRC (Cyclic Redundancy Check) and file length. Then check on your PC that the temporary file you saved has the same length and CRC. See above for using Jacksum for calculating CRC values.</p>
<hr />
<h2 id="recover">Recover</h2>
<p>This is designed to help you recover your source in the event that you press Reset. Pressing Reset sets the source to be empty. It does this by writing 0x00 to the first byte of the source area. The rest of the source is untouched. The Recover option does the following:</p>
<ul>
<li>Checks that the first byte of the source is 0x00</li>
<li>If so it replaces it by a space.</li>
</ul>
<p>This effectively makes your source available again, with possibly the first byte changed from something else to a space. To avoid having the source corrupted by this process I suggest you start your source with a space, then changing the first byte to a space will not have any effect.</p>
<hr />
<h2 id="more-about-cyclic-redundancy-checks-crcs">More about Cyclic Redundancy Checks (CRCs)</h2>
<p>CRC checks are designed to reliably detect burst errors in data communications. The code inside G-Pascal implements CRC-16-CCITT with the parameters as shown below. You can use <a href="https://jacksum.net/en/index.html">Jacksum</a> or your other favourite CRC generating program to compare the CRC generated by G-Pascal to the CRC of your file on disk.</p>
<p>To use Jacksum at the command line you can use these parameters:</p>
<pre><code>jacksum -a crc:16,1021,FFFF,false,false,0 -x YOUR_FILE_HERE</code></pre>
<p>The parameters to Jacksum mean:</p>
<ul>
<li>16 Bit CRC</li>
<li>Polynomial $1021 (without the leading bit), that is x<sup>16</sup> + x<sup>12</sup> + x<sup>5</sup> + 1</li>
<li>Initial value $FFFF</li>
<li>Mirror neither the input nor the output</li>
<li>No XOR at the end.</li>
</ul>
<p>As you can see from <a href="https://www.youtube.com/watch?v=izG7qT0EpBw">Ben Eater’s video</a> the CRC used here will detect any two-bit errors if they fall within the range of 32751 bits (4903 bytes) of each other. This would certainly be the case for reasonably small programs. Also all odd number of bit errors are detected. In fact CRC-16 should detect errors in the fraction (1 - 2<sup>-16</sup>) of cases, that is, 99.9984% of cases. Note that the figure 32751 is derived from 32767 - 16, where 16 are the 16 bits in the CRC itself.</p>
<h3 id="what-to-do-if-the-crc-disagrees">What to do if the CRC disagrees</h3>
<p>First, check that the number of bytes is correct. If it is not then the CRC will certainly be different. It is easy to add an extra line at the start or the end of the source, so check that the number of lines is correct, and if necessary delete any extra blank lines at the start or end.</p>
<p>If you have loaded a program, and the CRC fails, try compiling or assembling it. Any errors in that process may show you where there are corrupted bytes.</p>
<p>If you cannot resolve the difference try loading or saving the same file again. Also try removing trailing spaces which are hard to spot in the source, and may make the versions on your PC and Ben’s Board different. The source in G-Pascal always has a trailing newline at the end of every line (including the last) so make sure your file on disk ends with a newline.</p>
<p>The editor discards carriage-returns (0x0D) when accepting input. You should make sure that your file on disk ends with newlines only (0x0A) and not carriage-return (0x0D) as well. Modern editors have methods of converting files to newline-only endings. Personally I use <a href="https://www.geany.org/">Geany</a>.</p>
<hr />
<div class="quick_link">
<a href="index.htm">Back to main G-Pascal page</a>
</div>
<div class="quick_link">
<a href="editor.htm">Text editor</a>
</div>
<hr />
<h2 id="references">References</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Cyclic_redundancy_check">Cyclic redundancy check - Wikipedia</a></li>
<li><a href="https://www.youtube.com/watch?v=izG7qT0EpBw">How do CRCs work? - Ben Eater (YouTube)</a> (Video)</li>
<li><a href="https://jacksum.net/en/index.html">Jacksum</a></li>
<li><a href="http://srecord.sourceforge.net/crc16-ccitt.html">CRC16-CCITT</a></li>
<li><a href="https://www.geany.org/">Geany text editor</a></li>
</ul>
<hr />
<h2 id="license">License</h2>
<p>Information and images on this site are licensed under the <a href="https://creativecommons.org/licenses/by/3.0/au/">Creative Commons Attribution 3.0 Australia License</a> unless stated otherwise.</p>
</body>
</html>
